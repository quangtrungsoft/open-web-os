@using System.Net.Http.Json
@inject HttpClient Http
@inject MyDesktop.Services.OrchestratorService Orchestrator
@inject IJSRuntime JS
@inject NavigationManager Nav

<select @onchange="OnThemeSelected">
    <option value="">-- Select Theme --</option>
    @foreach (var theme in Themes)
    {
        <option value="@theme.ThemeId">@theme.Name</option>
    }
</select>
<button class="button" @onclick="PreviewTheme" disabled="@(!CanPreview)">Preview</button>
<button class="button" @onclick="ApplyTheme" disabled="@(!CanPreview)">Apply</button>

@if (ErrorMessages.Count > 0)
{
    <div class="theme-errors">
        <h4>Errors (Theme cannot be applied):</h4>
        <ul>
            @foreach (var err in ErrorMessages)
            {
                <li>@err</li>
            }
        </ul>
    </div>
}

@if (WarningMessages.Count > 0)
{
    <div class="theme-warnings">
        <h4>Warnings (Theme will be applied but may have issues):</h4>
        <ul>
            @foreach (var warning in WarningMessages)
            {
                <li>@warning</li>
            }
        </ul>
    </div>
}

@code {
    private List<MyDesktop.Models.ThemeManifest> Themes = new();
    private List<string> ErrorMessages = new();
    private List<string> WarningMessages = new();
    private MyDesktop.Models.ThemeManifest? SelectedTheme;
    private string? SelectedThemeId;
    private bool CanPreview => SelectedTheme != null;
    private MyDesktop.Models.ThemeManifest? ThemeToApplyOnRender;

    protected override async Task OnInitializedAsync()
    {
        var themeFiles = new[] { "darknight.json", "sunlight.json", "macosnight.json" };
        var baseUri = Nav.BaseUri.TrimEnd('/');
        foreach (var file in themeFiles)
        {
            var theme = await Http.GetFromJsonAsync<MyDesktop.Models.ThemeManifest>($"{baseUri}/themes/{file}");
            if (theme != null) Themes.Add(theme);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Load themeId từ localStorage nếu có
            var savedThemeId = await JS.InvokeAsync<string>("localStorage.getItem", "themeId");
            if (!string.IsNullOrEmpty(savedThemeId))
            {
                var theme = Themes.FirstOrDefault(t => t.ThemeId == savedThemeId);
                if (theme != null)
                {
                    SelectedTheme = theme;
                    SelectedThemeId = theme.ThemeId;
                    ThemeToApplyOnRender = theme; // Đánh dấu sẽ apply theme sau khi render
                    Orchestrator.InstallTheme(theme); // Đảm bảo Orchestrator có theme hiện tại
                    StateHasChanged();
                }
            }
        }

        if (ThemeToApplyOnRender != null)
        {
            await ApplyThemeCss(ThemeToApplyOnRender);
            ThemeToApplyOnRender = null;
        }
    }

    private void OnThemeSelected(ChangeEventArgs e)
    {
        SelectedThemeId = e.Value?.ToString();
        SelectedTheme = Themes.FirstOrDefault(t => t.ThemeId == SelectedThemeId);
        ErrorMessages.Clear();
        WarningMessages.Clear();
    }

    private async Task PreviewTheme()
    {
        if (SelectedTheme != null)
        {
            await ApplyThemeCss(SelectedTheme);
        }
    }

    private async Task ApplyTheme()
    {
        if (SelectedTheme != null)
        {
            var result = Orchestrator.InstallTheme(SelectedTheme);
            ErrorMessages = result.Errors;
            WarningMessages = result.Warnings;
            
            // Apply theme if valid (no critical errors)
            if (result.IsValid)
            {
                await ApplyThemeCss(SelectedTheme);
                // Lưu themeId vào localStorage
                await JS.InvokeVoidAsync("localStorage.setItem", "themeId", SelectedTheme.ThemeId);
            }
        }
    }

    private async Task ApplyThemeCss(MyDesktop.Models.ThemeManifest theme)
    {
        var cssVars = new Dictionary<string, string>();
        
        // Add Design System variables
        AddDesignSystemVariables(theme.DesignSystem, cssVars);
        
        // Add Component overrides (if any)
        foreach (var component in theme.Components)
        {
            foreach (var property in component.Value)
            {
                cssVars[$"{component.Key}-{property.Key}"] = property.Value;
            }
        }
        
        await JS.InvokeVoidAsync("themeInterop.setCssVariables", cssVars);
    }

    private void AddDesignSystemVariables(MyDesktop.Models.DesignSystem designSystem, Dictionary<string, string> cssVars)
    {
        // Add Color Palette
        AddColorVariables(designSystem.Colors, cssVars);
        
        // Add Typography
        AddTypographyVariables(designSystem.Typography, cssVars);
        
        // Add Spacing
        AddSpacingVariables(designSystem.Spacing, cssVars);
        
        // Add Borders
        AddBorderVariables(designSystem.Borders, cssVars);
        
        // Add Shadows
        AddShadowVariables(designSystem.Shadows, cssVars);
        
        // Add Layout
        AddLayoutVariables(designSystem.Layout, cssVars);
        
        // Add Animations
        AddAnimationVariables(designSystem.Animations, cssVars);
        
        // Add Components
        AddComponentVariables(designSystem.Components, cssVars);
    }

    private void AddColorVariables(MyDesktop.Models.ColorPalette colors, Dictionary<string, string> cssVars)
    {
        var colorProperties = typeof(MyDesktop.Models.ColorPalette).GetProperties();
        foreach (var prop in colorProperties)
        {
            var value = prop.GetValue(colors)?.ToString();
            if (!string.IsNullOrWhiteSpace(value))
            {
                cssVars[$"color-{ToKebabCase(prop.Name)}"] = value;
            }
        }
    }

    private void AddTypographyVariables(MyDesktop.Models.TypographyConfig typography, Dictionary<string, string> cssVars)
    {
        var typoProperties = typeof(MyDesktop.Models.TypographyConfig).GetProperties();
        foreach (var prop in typoProperties)
        {
            var value = prop.GetValue(typography)?.ToString();
            if (!string.IsNullOrWhiteSpace(value))
            {
                cssVars[$"typography-{ToKebabCase(prop.Name)}"] = value;
            }
        }
    }

    private void AddSpacingVariables(MyDesktop.Models.SpacingConfig spacing, Dictionary<string, string> cssVars)
    {
        var spacingProperties = typeof(MyDesktop.Models.SpacingConfig).GetProperties();
        foreach (var prop in spacingProperties)
        {
            var value = prop.GetValue(spacing)?.ToString();
            if (!string.IsNullOrWhiteSpace(value))
            {
                cssVars[$"spacing-{ToKebabCase(prop.Name)}"] = value;
            }
        }
    }

    private void AddBorderVariables(MyDesktop.Models.BorderConfig borders, Dictionary<string, string> cssVars)
    {
        var borderProperties = typeof(MyDesktop.Models.BorderConfig).GetProperties();
        foreach (var prop in borderProperties)
        {
            var value = prop.GetValue(borders)?.ToString();
            if (!string.IsNullOrWhiteSpace(value))
            {
                cssVars[$"border-{ToKebabCase(prop.Name)}"] = value;
            }
        }
    }

    private void AddShadowVariables(MyDesktop.Models.ShadowConfig shadows, Dictionary<string, string> cssVars)
    {
        var shadowProperties = typeof(MyDesktop.Models.ShadowConfig).GetProperties();
        foreach (var prop in shadowProperties)
        {
            var value = prop.GetValue(shadows)?.ToString();
            if (!string.IsNullOrWhiteSpace(value))
            {
                cssVars[$"shadow-{ToKebabCase(prop.Name)}"] = value;
            }
        }
    }

    private void AddLayoutVariables(MyDesktop.Models.LayoutConfig layout, Dictionary<string, string> cssVars)
    {
        var layoutProperties = typeof(MyDesktop.Models.LayoutConfig).GetProperties();
        foreach (var prop in layoutProperties)
        {
            var value = prop.GetValue(layout)?.ToString();
            if (!string.IsNullOrWhiteSpace(value))
            {
                cssVars[$"layout-{ToKebabCase(prop.Name)}"] = value;
            }
        }
    }

    private void AddAnimationVariables(MyDesktop.Models.AnimationConfig animations, Dictionary<string, string> cssVars)
    {
        var animationProperties = typeof(MyDesktop.Models.AnimationConfig).GetProperties();
        foreach (var prop in animationProperties)
        {
            var value = prop.GetValue(animations)?.ToString();
            if (!string.IsNullOrWhiteSpace(value))
            {
                cssVars[$"animation-{ToKebabCase(prop.Name)}"] = value;
            }
        }
    }

    private void AddComponentVariables(MyDesktop.Models.ComponentConfig components, Dictionary<string, string> cssVars)
    {
        // Add Button variables
        AddComponentConfigVariables(components.Button, "button", cssVars);
        
        // Add Input variables
        AddComponentConfigVariables(components.Input, "input", cssVars);
        
        // Add Form Control variables
        AddComponentConfigVariables(components.FormControl, "form-control", cssVars);
        
        // Add Window variables
        AddComponentConfigVariables(components.Window, "window", cssVars);
        
        // Add Navigation variables
        AddComponentConfigVariables(components.Navigation, "navigation", cssVars);
        
        // Add Overlay variables
        AddComponentConfigVariables(components.Overlay, "overlay", cssVars);
        
        // Add Scrollbar variables
        AddComponentConfigVariables(components.Scrollbar, "scrollbar", cssVars);
    }

    private void AddComponentConfigVariables(object componentConfig, string prefix, Dictionary<string, string> cssVars)
    {
        if (componentConfig == null) return;
        
        var properties = componentConfig.GetType().GetProperties();
        foreach (var prop in properties)
        {
            var value = prop.GetValue(componentConfig)?.ToString();
            if (!string.IsNullOrWhiteSpace(value))
            {
                cssVars[$"{prefix}-{ToKebabCase(prop.Name)}"] = value;
            }
        }
    }

    private string ToKebabCase(string input)
    {
        return string.Concat(input.Select((x, i) => i > 0 && char.IsUpper(x) ? "-" + x.ToString() : x.ToString())).ToLower();
    }
} 