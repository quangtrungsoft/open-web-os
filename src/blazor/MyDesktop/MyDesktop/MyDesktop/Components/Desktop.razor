@using MyDesktop.Components
@inject IWindowManager WindowManager

<div class="desktop">
    <!-- Desktop Icons Grid -->
    <div class="desktop-icons-grid">
        <div class="desktop-icon-item" @onclick='() => OpenApp("Terminal", typeof(TerminalComponent))'>
            <div class="desktop-icon-wrapper">
                <div class="desktop-icon-image">
                    <span class="desktop-icon-symbol">&#9000;</span>
                </div>
                <span class="desktop-icon-label">Terminal</span>
            </div>
        </div>
        
        <div class="desktop-icon-item" @onclick='() => OpenApp("Processes", typeof(ProcessListComponent))'>
            <div class="desktop-icon-wrapper">
                <div class="desktop-icon-image">
                    <span class="desktop-icon-symbol">&#9881;</span>
                </div>
                <span class="desktop-icon-label">Processes</span>
            </div>
        </div>
        
        <div class="desktop-icon-item" @onclick='() => OpenApp("Memory", typeof(MemoryMapComponent))'>
            <div class="desktop-icon-wrapper">
                <div class="desktop-icon-image">
                    <span class="desktop-icon-symbol">&#129504;</span>
                </div>
                <span class="desktop-icon-label">Memory</span>
            </div>
        </div>
        
        <div class="desktop-icon-item" @onclick='() => OpenApp("Files", typeof(FileBrowserComponent))'>
            <div class="desktop-icon-wrapper">
                <div class="desktop-icon-image">
                    <span class="desktop-icon-symbol">&#128193;</span>
                </div>
                <span class="desktop-icon-label">Files</span>
            </div>
        </div>
    </div>

    <!-- Windows -->
    @foreach (var win in WindowManager.Windows.OrderBy(w => w.ZIndex))
    {
        <WindowFrame TContent="object" Title="@win.Title"
                     ZIndex="@win.ZIndex"
                     Position="@win.Position"
                     Size="@win.Size"
                     IsActive="@win.IsActive"
                     OnClose="() => WindowManager.CloseWindow(win.Id)"
                     OnFocus="() => WindowManager.FocusWindow(win.Id)">
            <DynamicComponent Type="@win.ComponentType" Parameters="@win.Parameters" />
        </WindowFrame>
    }
    
    <!-- Dock -->
    <Dock OnOpenApp="HandleOpenApp" />
</div>

<style>
.desktop {
    background: var(--desktop-background, var(--color-background));
    color: var(--desktop-text-color, var(--color-text-primary));
    font-family: var(--typography-font-family-primary);
    font-size: var(--typography-font-size-base);
    line-height: var(--typography-line-height-normal);
    min-height: 100vh;
    position: relative;
    overflow: hidden;
    padding-top: var(--desktop-padding-top, var(--menu-bar-height, 2rem));
}

.desktop-icons-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(var(--desktop-icon-min-width, 120px), 1fr));
    gap: var(--desktop-icon-gap, var(--spacing-6));
    padding: var(--desktop-icons-padding, var(--spacing-8));
    max-width: var(--desktop-icons-max-width, 800px);
    margin: 0 auto;
    position: relative;
    z-index: var(--layout-z-index-dropdown);
}

.desktop-icon-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    cursor: pointer;
    transition: var(--animation-transition-all);
    padding: var(--desktop-icon-padding, var(--spacing-2));
    border-radius: var(--desktop-icon-border-radius, var(--border-radius-lg));
    user-select: none;
}

.desktop-icon-item:hover {
    background: var(--desktop-icon-hover-background, var(--color-surface-hover));
    transform: translateY(-2px);
}

.desktop-icon-item:active {
    background: var(--desktop-icon-active-background, var(--color-surface-active));
    transform: translateY(0);
}

.desktop-icon-wrapper {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: var(--desktop-icon-content-gap, var(--spacing-2));
    width: 100%;
    max-width: var(--desktop-icon-max-width, 100px);
}

.desktop-icon-image {
    width: var(--desktop-icon-size, 64px);
    height: var(--desktop-icon-size, 64px);
    background: var(--desktop-icon-background, var(--color-surface-primary));
    border: var(--desktop-icon-border, 1px solid var(--color-border-primary));
    border-radius: var(--desktop-icon-image-border-radius, var(--border-radius-lg));
    display: flex;
    align-items: center;
    justify-content: center;
    box-shadow: var(--desktop-icon-shadow, var(--shadow-sm));
    transition: var(--animation-transition-all);
    backdrop-filter: var(--desktop-icon-backdrop-filter, blur(10px));
}

.desktop-icon-item:hover .desktop-icon-image {
    border-color: var(--desktop-icon-hover-border-color, var(--color-border-focus));
    box-shadow: var(--desktop-icon-hover-shadow, var(--shadow-md));
    transform: scale(1.05);
}

.desktop-icon-symbol {
    font-size: var(--desktop-icon-symbol-size, 2rem);
    line-height: 1;
}

.desktop-icon-label {
    font-size: var(--desktop-icon-label-font-size, var(--typography-font-size-sm));
    font-weight: var(--desktop-icon-label-font-weight, var(--typography-font-weight-medium));
    color: var(--desktop-icon-label-color, var(--color-text-primary));
    text-align: center;
    line-height: var(--desktop-icon-label-line-height, 1.2);
    word-break: break-word;
    max-width: 100%;
    padding: 0 var(--spacing-1);
}

/* Desktop Background Pattern */
.desktop::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-image: var(--desktop-background-pattern, none);
    background-size: var(--desktop-background-size, cover);
    background-position: var(--desktop-background-position, center);
    background-repeat: var(--desktop-background-repeat, no-repeat);
    opacity: var(--desktop-background-opacity, 0.1);
    z-index: -1;
    pointer-events: none;
}

/* Responsive adjustments */
@@media (max-width: var(--layout-breakpoint-lg)) {
    .desktop-icons-grid {
        grid-template-columns: repeat(auto-fit, minmax(100px, 1fr));
        gap: var(--spacing-4);
        padding: var(--spacing-6);
    }
    
    .desktop-icon-image {
        width: 56px;
        height: 56px;
    }
    
    .desktop-icon-symbol {
        font-size: 1.75rem;
    }
}

@@media (max-width: var(--layout-breakpoint-md)) {
    .desktop-icons-grid {
        grid-template-columns: repeat(auto-fit, minmax(80px, 1fr));
        gap: var(--spacing-3);
        padding: var(--spacing-4);
    }
    
    .desktop-icon-image {
        width: 48px;
        height: 48px;
    }
    
    .desktop-icon-symbol {
        font-size: 1.5rem;
    }
    
    .desktop-icon-label {
        font-size: var(--typography-font-size-xs);
    }
}

@@media (max-width: var(--layout-breakpoint-sm)) {
    .desktop {
        padding-top: var(--menu-bar-height-mobile, 1.75rem);
    }
    
    .desktop-icons-grid {
        grid-template-columns: repeat(2, 1fr);
        gap: var(--spacing-2);
        padding: var(--spacing-3);
    }
    
    .desktop-icon-image {
        width: 40px;
        height: 40px;
    }
    
    .desktop-icon-symbol {
        font-size: 1.25rem;
    }
    
    .desktop-icon-label {
        font-size: var(--typography-font-size-xs);
        line-height: 1.1;
    }
    
    .desktop-icon-item:hover {
        transform: translateY(-1px);
    }
}

/* Animation for desktop icons */
.desktop-icon-item {
    animation: desktopIconFadeIn 0.3s ease-out;
}

.desktop-icon-item:nth-child(1) { animation-delay: 0.1s; }
.desktop-icon-item:nth-child(2) { animation-delay: 0.2s; }
.desktop-icon-item:nth-child(3) { animation-delay: 0.3s; }
.desktop-icon-item:nth-child(4) { animation-delay: 0.4s; }

@@keyframes desktopIconFadeIn {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

/* Focus styles for accessibility */
.desktop-icon-item:focus {
    outline: none;
    box-shadow: 0 0 0 3px var(--color-focus-ring);
    border-radius: var(--border-radius-lg);
}

.desktop-icon-item:focus .desktop-icon-image {
    border-color: var(--color-border-focus);
}
</style>

@code {
    protected override void OnInitialized()
    {
        WindowManager.OnWindowsChanged += OnWindowsChangedHandler;
    }
    
    void OnWindowsChangedHandler()
    {
        InvokeAsync(StateHasChanged);
    }
    
    void OpenApp(string title, Type componentType)
    {
        WindowManager.OpenWindow(title, componentType);
    }
    
    private Task HandleOpenApp((string, Type) args)
    {
        WindowManager.OpenWindow(args.Item1, args.Item2);
        return Task.CompletedTask;
    }
    
    public void Dispose()
    {
        WindowManager.OnWindowsChanged -= OnWindowsChangedHandler;
    }
} 